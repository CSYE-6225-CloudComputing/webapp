name: build-image-creation

on:
  pull_request:
    types:
      - closed
    branches:
      - main

jobs:
  build-custom-image:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    env:
      SOURCE_AMI: ${{ secrets.SOURCE_AMI }}
      SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
      PROFILE: ${{ secrets.PROFILE }}
      AWS_DEVUSER: ${{ secrets.AWS_DEVUSER }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      DB_DATABASE: ${{ secrets.DB_DATABASE }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      AWS_DEMOUSER: ${{ secrets.AWS_DEMOUSER }}
      VPC_SUBNET_ID: ${{ secrets.SUBNET_ID }}
      VPC_ID: ${{ secrets.VPC_ID }}
      INSTANCE_TYPE: ${{ secrets.INSTANCE_TYPE }}

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'corretto'
          architecture: x64

      - name: Start MySQL Service
        run: |
          sudo /etc/init.d/mysql start  # Start MySQL service

      - name: Create Database
        run: |
          mysql -u$DB_USER --password=$DB_PASSWORD -e "CREATE DATABASE IF NOT EXISTS $DB_DATABASE;"

      - name: Run Tests
        run: mvn test
        env:
          SPRING_DATASOURCE_URL: "jdbc:mysql://localhost:3306/${{ env.DB_DATABASE }}"
          SPRING_DATASOURCE_USERNAME: "${{ env.DB_USER }}"
          SPRING_DATASOURCE_PASSWORD: "${{ env.DB_PASSWORD }}" 
          AWS_S3_BUCKET_NAME: "mock-bucket"
          AWS_S3_REGION: "us-east-1"
          AWS_SNS_ARN: "test"
          DOMAIN_NAME: "dev.manalicloud.me"

      - name: Build Maven WAR
        run: |
          mvn clean package -DskipTests
          rm -rf imgbuild
          mkdir imgbuild && cp target/cloudproject-0.0.1-SNAPSHOT.war imgbuild
          cp imgbuild/*.war /home/runner/work/webapp/webapp
          cd /home/runner/work/webapp/webapp && ls -all
          cd /home/runner/work/webapp/webapp/imgbuild && ls -all

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Packer
        uses: hashicorp/setup-packer@v3
        with:
          version: "latest"

      - name: Initialize Packer
        run: packer init .
        working-directory: ./packer

      - name: Packer Validate
        run: packer validate .
        working-directory: ./packer

      - name: Build Image
        id: build_image
        run: |
          packer build -var "aws_region=${AWS_REGION}" \
                       -var "source_ami=${SOURCE_AMI}" \
                       -var "ssh_username=${SSH_USERNAME}" \
                       -var "profile=${PROFILE}" \
                       -var "aws_demouser=${AWS_DEMOUSER}" \
                       -var "subnet_id=${VPC_SUBNET_ID}" \
                       -var "vpc_id=${VPC_ID}" \
                       -var "instance_type=${INSTANCE_TYPE}" \
                       ami.pkr.hcl

          sudo apt-get install jq
          ami_id=$(jq -r '.builds[-1].artifact_id' manifest.json | cut -d':' -f2)
          echo "AMI_ID=$ami_id" >> $GITHUB_ENV
          echo "::set-output name=ami_id::$ami_id"
          echo "AMI ID: $ami_id"

        working-directory: ./packer

    outputs:
      ami_id: ${{ steps.build_image.outputs.ami_id }}

  update-launch-template-and-refresh-asg:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    needs: build-custom-image

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      LAUNCH_TEMPLATE_NAME: ${{ secrets.LAUNCH_TEMPLATE_NAME }}
      AUTO_SCALING_GROUP_NAME: ${{ secrets.AUTO_SCALING_GROUP_NAME }}

    steps:
      - name: Configure AWS Credentials for Launch Template
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create New Launch Template Version with Latest AMI
        id: create_launch_template_version
        run: |
          echo "AMI_ID from build-custom-image job: ${{ needs.build-custom-image.outputs.ami_id }}"
          
          # Create a new version of the launch template with the latest AMI ID
          response=$(aws ec2 create-launch-template-version \
            --launch-template-name ${{ env.LAUNCH_TEMPLATE_NAME }} \
            --version-description "WebVersion-$(date +%Y%m%d%H%M%S)" \
            --source-version 1 \
            --launch-template-data '{"ImageId":"${{ needs.build-custom-image.outputs.ami_id }}"}')
          
          # Extract the new version number from the response
          latest_version=$(echo "$response" | jq -r '.LaunchTemplateVersion.VersionNumber')
          
          echo "Created new launch template version: $latest_version"
          
          # Set the new version as an output so it can be used in the next step
          echo "latest_version=$latest_version" >> $GITHUB_OUTPUT

      - name: Set Latest Launch Template Version as Default
        run: |
          launch_template_name="${{ env.LAUNCH_TEMPLATE_NAME }}"
          latest_version="${{ steps.create_launch_template_version.outputs.latest_version }}"
          
          # Set the new version as the default version for the launch template
          aws ec2 modify-launch-template \
            --launch-template-name $launch_template_name \
            --default-version $latest_version \
            --output json

      - name: Update Auto Scaling Group to Use Latest Launch Template Version
        id: update_asg
        run: |
          latest_version=${{ steps.create_launch_template_version.outputs.latest_version }}
          echo "Updating Auto Scaling Group to use launch template version: $latest_version"
          
          # Update the Auto Scaling Group to use the latest version of the launch template
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name ${{ env.AUTO_SCALING_GROUP_NAME }} \
            --launch-template "LaunchTemplateName=${{ env.LAUNCH_TEMPLATE_NAME }},Version=${latest_version}"
        
      - name: Trigger Instance Refresh
        run: |
          aws autoscaling start-instance-refresh \
            --auto-scaling-group-name ${{ env.AUTO_SCALING_GROUP_NAME }}

      - name: Wait for Instance Refresh to Complete
        run: |
          status=$(aws autoscaling describe-instance-refreshes \
            --auto-scaling-group-name ${{ env.AUTO_SCALING_GROUP_NAME }} \
            --query 'InstanceRefreshes[0].Status' \
            --output text)
          while [[ "$status" != "Successful" && "$status" != "Failed" && "$status" != "Cancelled" ]]; do
            sleep 60
            status=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name ${{ env.AUTO_SCALING_GROUP_NAME }} \
              --query 'InstanceRefreshes[0].Status' \
              --output text)
          done

          if [ "$status" == "Failed" ] || [ "$status" == "Cancelled" ]; then
            exit 1
          fi

    outputs:
      latest_version: ${{ steps.create_launch_template_version.outputs.latest_version }}
