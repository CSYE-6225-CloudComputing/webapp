name: build-image-creation

on:
  pull_request:
    branches:
      - main

jobs:
  build-custom-image:
    runs-on: ubuntu-latest

    env:
      SOURCE_AMI: ${{ secrets.SOURCE_AMI }}
      SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
      PROFILE: ${{ secrets.PROFILE }}
      AWS_DEVUSER: ${{ secrets.AWS_DEVUSER }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      DB_DATABASE: ${{ secrets.DB_DATABASE }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      AWS_DEMOUSER: ${{ secrets.AWS_DEMOUSER }}
      VPC_SUBNET_ID: ${{ secrets.SUBNET_ID }}
      VPC_ID: ${{ secrets.VPC_ID }}
      INSTANCE_TYPE: ${{ secrets.INSTANCE_TYPE }}

    steps:
      # 1. Checkout the repository
      - name: Checkout source code
        uses: actions/checkout@v4

      # 2. Set up JDK 21 for Maven build
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'corretto'
          architecture: x64
          
      # 3. Run integration test  
      - name: Start MySQL Service
        run: |
          sudo /etc/init.d/mysql start  # Start MySQL service

      - name: Create Database
        run: |
          mysql -u$DB_USER --password=$DB_PASSWORD -e "CREATE DATABASE IF NOT EXISTS $DB_DATABASE;"

      - name: Run Tests
        run: mvn test
        env:
          SPRING_DATASOURCE_URL: "jdbc:mysql://localhost:3306/${{ env.DB_DATABASE }}"
          SPRING_DATASOURCE_USERNAME: "${{ env.DB_USER }}"
          SPRING_DATASOURCE_PASSWORD: "${{ env.DB_PASSWORD }}"    

      # 4. Build the application artifact
      - name: Build Maven WAR
        run: |
             mvn clean package -DskipTests
             pwd
             rm -rf imgbuild
             mkdir imgbuild && cp target/cloudproject-0.0.1-SNAPSHOT.war imgbuild   
             cp imgbuild/*.war /home/runner/work/webapp/webapp
             cd /home/runner/work/webapp/webapp && ls -all
             cd /home/runner/work/webapp/webapp/imgbuild && ls -all
             cd /home/runner/work/webapp/webapp/target && ls -all
             
             
        env:
          DB_URL: ${{ secrets.DB_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

      # 5. Upload the WAR file as an artifact
      - name: Upload WAR Artifact
        uses: actions/upload-artifact@v4
        with:
          name: cloudproject
          path: target/cloudproject-0.0.1-SNAPSHOT.war

      # 6. Set up AWS credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 7. Setup Packer fie
      - name: Setup Packer
        uses: hashicorp/setup-packer@v3
        with:
          version: "latest"

      # 8. Initialize Packer
      - name: Initialize Packer
        run: packer init .
        working-directory: ./packer

      # 9. Packer Validate
      - name: Packer Validate
        run: packer validate .
        working-directory: ./packer

      # 10. Build the custom image using Packer
      - name: Build Image
        run: |
          packer build -var "aws_region=${AWS_REGION}" \
                       -var "source_ami=${SOURCE_AMI}" \
                       -var "ssh_username=${SSH_USERNAME}" \
                       -var "profile=${PROFILE}" \
                       -var "database=${DB_DATABASE}" \
                       -var "user=${DB_USER}" \
                       -var "password=${DB_PASSWORD}" \
                       -var "aws_demouser=${AWS_DEMOUSER}" \
                       -var "subnet_id=${VPC_SUBNET_ID}" \
                       -var "vpc_id=${VPC_ID}" \
                       -var "instance_type=${INSTANCE_TYPE}" \
                       -var "aws_devuser=${AWS_DEVUSER}" .
        working-directory: ./packer